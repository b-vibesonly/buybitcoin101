---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import CircleLink from '../components/CircleLink.astro';
---

<BaseLayout title="Home">
  <Header showDonation={true} />

  <main class="main-content">
    <div class="container">
      <div class="bitcoin-explosion" id="bitcoin-explosion"></div>
      <div class="links-grid-container">
        <div class="pizza" id="flying-pizza">üçï</div>
        <div class="links-grid">
        <CircleLink
          href="/what-is-money"
          text="What is money"
          color="#00E5FF"
          textColor="#111"
          style="--i: 0"
        />
        <CircleLink
          href="/why-am-i-broke"
          text="Why am I broke"
          color="#7C4DFF"
          textColor="white"
          style="--i: 1"
        />
        <CircleLink
          href="/10-bitcoin-facts"
          text="10 Bitcoin facts"
          color="#FFEA00"
          textColor="#111"
          style="--i: 2"
        />
        <CircleLink
          href="/am-i-too-late"
          text="Am I too late"
          color="#00E676"
          textColor="#111"
          style="--i: 3"
        />
        <CircleLink
          href="/where-to-buy"
          text="Where to buy"
          color="#FF4081"
          textColor="white"
          style="--i: 4"
        />
        <CircleLink
          href="/self-custody"
          text="What is self custody"
          color="#FF2D55"
          textColor="white"
          style="--i: 5"
        />
        </div>
      </div>
    </div>
  </main>

  <style>
    .main-content {
      padding: var(--spacing-lg) 0;
      flex: 1;
    }

    .links-grid {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-sm);
      width: 100%;
      padding: var(--spacing-md) 0;
      max-width: 600px;
      margin: 0 auto;
    }

    @media (min-width: 600px) {
      .links-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        max-width: 800px;
        gap: var(--spacing-md);
      }

      .links-grid a {
        height: 100%;
      }
    }

    @media (min-width: 1024px) {
      .links-grid {
        grid-template-columns: repeat(3, 1fr);
        max-width: 1000px;
        gap: var(--spacing-lg);
        padding: var(--spacing-xl) 0;
      }
    }

    .pizza {
      position: absolute;
      font-size: 2rem;
      z-index: 100;
      pointer-events: auto;
      cursor: pointer;
      user-select: none;
      top: -1.5rem;
      left: 50%;
      transform: translateX(-50%);
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
      color: #000;
      text-shadow: none;
      transition: transform 0.1s ease;
    }

    .links-grid-container {
      position: relative;
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
    }

    .pizza:active {
      transform: translateX(-50%) scale(0.9);
    }

    @media (max-width: 768px) {
      .pizza {
        font-size: 1.5rem;
      }
      
      .links-grid-container {
        max-width: 100%;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      * {
        transition: none !important;
        animation: none !important;
      }
    }

    .bitcoin-explosion {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
      z-index: 99;
    }

    .confetti-piece {
      position: absolute;
      pointer-events: none;
      user-select: none;
      transform-origin: center;
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
    }

    .pizza.exploding {
      opacity: 0 !important;
      transition: opacity 0.5s ease-out;
    }
    
    .pizza:not(.exploding) {
      opacity: 1;
      transition: opacity 0.3s ease-in;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const pizza = document.getElementById('flying-pizza');
      const explosionContainer = document.getElementById('bitcoin-explosion');
      let hasExploded = false;

      pizza?.addEventListener('click', function(e) {
        if (hasExploded) return;
        
        hasExploded = true;
        
        // Get pizza's current animated position
        const rect = pizza.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        // Store the explosion position
        const explosionX = centerX;
        const explosionY = centerY;
        
        // Add exploding class to pizza
        pizza.classList.add('exploding');
        
        // Create confetti explosion
        const confettiCount = 50; // More confetti pieces
        const colors = ['üß°', 'üí∞', '‚≠ê', 'ü™ô', '‚ú®', 'üê∞'];
        
        for (let i = 0; i < confettiCount; i++) {
          const confetti = document.createElement('div');
          confetti.className = 'confetti-piece';
          confetti.innerHTML = colors[Math.floor(Math.random() * colors.length)];
          
          // Random properties - bigger explosion
          const angle = Math.random() * Math.PI * 2;
          const velocity = Math.random() * 25 + 10; // Increased velocity
          const gravity = 0.3; // Reduced gravity for longer flight
          const friction = 0.985; // Less friction
          const wobble = Math.random() * 0.1 + 0.05;
          
          let x = explosionX;
          let y = explosionY;
          let vx = Math.cos(angle) * velocity;
          let vy = Math.sin(angle) * velocity;
          let rotation = 0;
          let rotationSpeed = Math.random() * 20 - 10;
          let opacity = 1;
          let scale = Math.random() * 0.5 + 0.5;
          
          confetti.style.position = 'absolute';
          confetti.style.left = x + 'px';
          confetti.style.top = y + 'px';
          confetti.style.fontSize = (Math.random() * 1.5 + 1.5) + 'rem'; // Bigger confetti
          confetti.style.pointerEvents = 'none';
          confetti.style.zIndex = '1000';
          
          explosionContainer?.appendChild(confetti);
          
          let startTime = null;
          
          function animate(timestamp) {
            if (!startTime) startTime = timestamp;
            const elapsed = timestamp - startTime;
            
            // Physics simulation
            vy += gravity;
            vx *= friction;
            vy *= friction;
            
            x += vx;
            y += vy;
            
            rotation += rotationSpeed;
            
            // Wobble effect
            x += Math.sin(elapsed * wobble) * 0.5;
            
            // Fade out over time - longer duration
            opacity = Math.max(0, 1 - elapsed / 4000);
            
            // Apply transforms
            confetti.style.left = x + 'px';
            confetti.style.top = y + 'px';
            confetti.style.transform = `rotate(${rotation}deg) scale(${scale})`;
            confetti.style.opacity = opacity;
            
            // Remove when off screen or faded
            if (opacity > 0 && y < window.innerHeight + 100) {
              requestAnimationFrame(animate);
            } else {
              confetti.remove();
            }
          }
          
          requestAnimationFrame(animate);
        }
        
        // Pizza vanishes permanently after explosion
        setTimeout(() => {
          pizza.style.display = 'none'; // Hide pizza permanently
          // Don't reset hasExploded so pizza stays gone
        }, 1000);
      });
    });
  </script>

</BaseLayout>
